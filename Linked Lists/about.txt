Linked lists, as the name suggests, involves linking within a list.

Why, you may ask?
To solve a major problem of arrays!

Some context- Arrays have contiguous memory allocation, i.e., consecutive elements are stored to consecutive memory addresses.
This allows for easy and random access.

Let's say there is an array, int arr[6] = {0,1,2,3,4,5}
Now I can directly access the third element by- arr[2]. Just simple indexing, that too in O(1) time complexity.

But in the very declaration, one can notice, that the size has to be specified. So, arrays won't work when dynamic memory allocation is required.
This is exactly the problem linked lists solve.

Imagine, there are random "blocks" scattered all over. Let's name them A,B,C and D. They have little "holes" or maybe some "structure" to help attach something with it.

Attach a string to A. You can pull it and "access" it. But what about the rest?
So, you attach a string from A to B as well.
Now, pulling on A, will also get you B.
Repeat this process till you get to D.
You'll notice, that since D is the last element, it doesn't have another string to lead anywhere. Essentially, that is "null".
And congratulations! You (conceptually) made your first linked list :D

Technically, these blocks are called nodes. Think of it as a data type which you are creating by yourself. (This might lead you to think about the creation of classes/struct)

These nodes contain two things. The data being stored in it, and a pointer to the next node. (the holes mentioned before)

Now to access the whole thing, we "attach a string" to the first block. This refers to a pointer to the first element, which is usually called the head/start.

With this, linked lists solve the problem of fixed memory constraints. You can attach and remove these "blocks" as and when required.
You need not specify how many "blocks" you will be needing to make it. That is entirely upto you.

Although, few problems like extra space(since we are storing the address of the next node), and random access isn't available (indexing won't work as data is scattered),
it is a useful data structure which will find its application even in stacks and queues!

Types of linked lists-
1. Singly LL - only points to the next node.
2. Doubly LL - can point to the next, as well as the previous node.
3. Circular (Singly/Doubly) LL - The start points to the end (and for doubly, the end points to the start as well)

And that's all you require!